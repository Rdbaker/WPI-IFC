"""Removes [users|preusers].username and adds [users|preusers].email instead

Revision ID: a2c99320aae4
Revises: 06299bfd31e3
Create Date: 2016-12-19 14:50:15.468293

"""

# revision identifiers, used by Alembic.
revision = 'a2c99320aae4'
down_revision = '06299bfd31e3'

from alembic import op
import sqlalchemy as sa


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('preusers', sa.Column('email', sa.String(length=100), nullable=True))

    # update all emails for the current preusers
    op.execute("UPDATE preusers SET email=username || '@wpi.edu';")

    op.drop_column('preusers', 'username')

    op.add_column('users', sa.Column('email', sa.String(length=100)))

    # update all emails for the current users
    op.execute("UPDATE users set email=username || '@wpi.edu';");

    op.alter_column('users', 'email',
                    existing_type=sa.String(length=100),
                    nullable=False)

    op.drop_constraint(u'users_username_key', 'users', type_='unique')
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'username')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('username', sa.VARCHAR(length=80), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.create_unique_constraint(u'users_username_key', 'users', ['username'])

    # get the username back from the emails in the users table
    op.execute("update users set username=split_part(email, '@', 1);")

    op.drop_column('users', 'email')
    op.add_column('preusers', sa.Column('username', sa.VARCHAR(length=80), autoincrement=False, nullable=True))

    # get the username back from the emails in the preusers table
    op.execute("update preusers set username=split_part(email, '@', 1);")

    op.drop_column('preusers', 'email')
    # ### end Alembic commands ###
